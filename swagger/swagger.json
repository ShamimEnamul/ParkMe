{
    "swagger": "2.0",
    "info": {
        "title": "beego Test API",
        "description": "beego has a very cool tools to autogenerate documents for your API\n",
        "version": "1.0.0",
        "termsOfService": "http://beego.me/",
        "contact": {
            "email": "astaxie@gmail.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        }
    },
    "basePath": "/v1",
    "paths": {
        "/parking-lot/": {
            "get": {
                "tags": [
                    "parking-lot"
                ],
                "description": "get ParkingLot\n\u003cbr\u003e",
                "operationId": "ParkingLotController.GetAll",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.ParkingLot"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "parking-lot"
                ],
                "description": "create ParkingLot\n\u003cbr\u003e",
                "operationId": "ParkingLotController.Create",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for ParkingLot content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ParkingLot"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.ParkingLot"
                        }
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/parking-lot/details/{id}": {
            "get": {
                "tags": [
                    "parking-lot"
                ],
                "description": "get ParkingLot by id\n\u003cbr\u003e",
                "operationId": "ParkingLotController.GetDetails",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.ParkingLot"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            }
        },
        "/parking-lot/{id}": {
            "get": {
                "tags": [
                    "parking-lot"
                ],
                "description": "get ParkingLot by id\n\u003cbr\u003e",
                "operationId": "ParkingLotController.GetOne",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.ParkingLot"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "parking-lot"
                ],
                "description": "update the ParkingLot\n\u003cbr\u003e",
                "operationId": "ParkingLotController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for ParkingLot content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ParkingLot"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.ParkingLot"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "parking-lot"
                ],
                "description": "delete the ParkingLot\n\u003cbr\u003e",
                "operationId": "ParkingLotController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/parking-slot/": {
            "get": {
                "tags": [
                    "parking-slot"
                ],
                "description": "get ParkingSlot\n\u003cbr\u003e",
                "operationId": "ParkingSlotController.GetAll",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.ParkingSlot"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "parking-slot"
                ],
                "description": "create ParkingSlot\n\u003cbr\u003e",
                "operationId": "ParkingSlotController.Create",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for ParkingSlot content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ParkingSlot"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.ParkingSlot"
                        }
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/parking-slot/{id}": {
            "get": {
                "tags": [
                    "parking-slot"
                ],
                "description": "get ParkingSlot by id\n\u003cbr\u003e",
                "operationId": "ParkingSlotController.GetOne",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.ParkingSlot"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "parking-slot"
                ],
                "description": "update the ParkingSlot\n\u003cbr\u003e",
                "operationId": "ParkingSlotController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for ParkingSlot content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ParkingSlot"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.ParkingSlot"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "parking-slot"
                ],
                "description": "delete the ParkingSlot\n\u003cbr\u003e",
                "operationId": "ParkingSlotController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/reservation/": {
            "get": {
                "tags": [
                    "reservation"
                ],
                "description": "get Reservation\n\u003cbr\u003e",
                "operationId": "ReservationController.GetAll",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Reservation"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "reservation"
                ],
                "description": "create Reservation\n\u003cbr\u003e",
                "operationId": "ReservationController.Create",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Reservation content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Reservation"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Reservation"
                        }
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/reservation/{id}": {
            "get": {
                "tags": [
                    "reservation"
                ],
                "description": "get Reservation by id\n\u003cbr\u003e",
                "operationId": "ReservationController.GetOne",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Reservation"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "reservation"
                ],
                "description": "update the Reservation\n\u003cbr\u003e",
                "operationId": "ReservationController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Reservation content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Reservation"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Reservation"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "reservation"
                ],
                "description": "delete the Reservation\n\u003cbr\u003e",
                "operationId": "ReservationController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/user/": {
            "get": {
                "tags": [
                    "user"
                ],
                "description": "get all Users\n\u003cbr\u003e",
                "operationId": "UserController.GetAll",
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "user"
                ],
                "description": "create users\n\u003cbr\u003e",
                "operationId": "UserController.CreateUser",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for user content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{int} models.User.Id"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/user/dd": {
            "get": {
                "tags": [
                    "user"
                ],
                "description": "get user by uid\n\u003cbr\u003e",
                "operationId": "UserController.Get",
                "parameters": [
                    {
                        "in": "path",
                        "name": "uid",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "403": {
                        "description": ":uid is empty"
                    }
                }
            }
        },
        "/user/login": {
            "get": {
                "tags": [
                    "user"
                ],
                "description": "Logs user into the system\n\u003cbr\u003e",
                "operationId": "UserController.Login",
                "parameters": [
                    {
                        "in": "query",
                        "name": "username",
                        "description": "The username for login",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "password",
                        "description": "The password for login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} login success"
                    },
                    "403": {
                        "description": "user not exist"
                    }
                }
            }
        },
        "/user/logout": {
            "get": {
                "tags": [
                    "user"
                ],
                "description": "Logs out current logged in user session\n\u003cbr\u003e",
                "operationId": "UserController.logout",
                "responses": {
                    "200": {
                        "description": "{string} logout success"
                    }
                }
            }
        },
        "/user/{uid}": {
            "get": {
                "tags": [
                    "user"
                ],
                "description": "get user by uid\n\u003cbr\u003e",
                "operationId": "UserController.Get",
                "parameters": [
                    {
                        "in": "path",
                        "name": "uid",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "403": {
                        "description": ":uid is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "user"
                ],
                "description": "update the user\n\u003cbr\u003e",
                "operationId": "UserController.Update",
                "parameters": [
                    {
                        "in": "path",
                        "name": "uid",
                        "description": "The uid you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for user content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "403": {
                        "description": ":uid is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "user"
                ],
                "description": "delete the user\n\u003cbr\u003e",
                "operationId": "UserController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "uid",
                        "description": "The uid you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "uid is empty"
                    }
                }
            }
        },
        "/vehicle/": {
            "get": {
                "tags": [
                    "vehicle"
                ],
                "description": "get Vehicle\n\u003cbr\u003e",
                "operationId": "VehicleController.GetAll",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Vehicle"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "vehicle"
                ],
                "description": "park Vehicle\n\u003cbr\u003e",
                "operationId": "VehicleController.Create",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Vehicle content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Vehicle"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Vehicle"
                        }
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/vehicle/details": {
            "get": {
                "tags": [
                    "vehicle"
                ],
                "description": "get Vehicle by id\n\u003cbr\u003e",
                "operationId": "VehicleController.Get Vehicle Details by parkingLot and Slot",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Vehicle"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            }
        },
        "/vehicle/park": {
            "post": {
                "tags": [
                    "vehicle"
                ],
                "description": "park Vehicle\n\u003cbr\u003e",
                "operationId": "VehicleController.Park",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Vehicle content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Vehicle"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Vehicle"
                        }
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/vehicle/unpark/{id}": {
            "put": {
                "tags": [
                    "vehicle"
                ],
                "description": "unpark the Vehicle\n\u003cbr\u003e",
                "operationId": "VehicleController.UnPark",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Vehicle content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Vehicle"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Vehicle"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            }
        },
        "/vehicle/{id}": {
            "get": {
                "tags": [
                    "vehicle"
                ],
                "description": "get Vehicle by id\n\u003cbr\u003e",
                "operationId": "VehicleController.GetOne",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Vehicle"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "vehicle"
                ],
                "description": "update the Vehicle\n\u003cbr\u003e",
                "operationId": "VehicleController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Vehicle content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Vehicle"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Vehicle"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "vehicle"
                ],
                "description": "delete the Vehicle\n\u003cbr\u003e",
                "operationId": "VehicleController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        }
    },
    "definitions": {
        "models.Object": {
            "title": "Object",
            "type": "object",
            "properties": {
                "ObjectId": {
                    "type": "string"
                },
                "PlayerName": {
                    "type": "string"
                },
                "Score": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "models.ParkingLot": {
            "title": "ParkingLot",
            "type": "object",
            "properties": {
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "active": {
                    "type": "boolean"
                },
                "capacity": {
                    "type": "integer",
                    "format": "int64"
                },
                "createdBy": {
                    "type": "integer",
                    "format": "int64"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "models.ParkingSlot": {
            "title": "ParkingSlot",
            "type": "object",
            "properties": {
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "IsMaintenance": {
                    "type": "boolean"
                },
                "isOccupied": {
                    "type": "boolean"
                },
                "parkingLotID": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "models.Profile": {
            "title": "Profile",
            "type": "object",
            "properties": {
                "Address": {
                    "type": "string"
                },
                "Age": {
                    "type": "integer",
                    "format": "int64"
                },
                "Email": {
                    "type": "string"
                },
                "Gender": {
                    "type": "string"
                }
            }
        },
        "models.Reservation": {
            "title": "Reservation",
            "type": "object",
            "properties": {
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "parkingLotId": {
                    "type": "integer",
                    "format": "int64"
                },
                "parkingSlotId": {
                    "type": "integer",
                    "format": "int64"
                },
                "vehicleId": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "models.User": {
            "title": "User",
            "type": "object",
            "properties": {
                "Id": {
                    "type": "string"
                },
                "Password": {
                    "type": "string"
                },
                "Profile": {
                    "$ref": "#/definitions/models.Profile"
                },
                "Username": {
                    "type": "string"
                }
            }
        },
        "models.Vehicle": {
            "title": "Vehicle",
            "type": "object",
            "properties": {
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "registrationNo": {
                    "type": "string"
                },
                "userId": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        }
    },
    "tags": [
        {
            "name": "user",
            "description": "Operations about Users\n"
        },
        {
            "name": "parking-lot",
            "description": "ParkingLotController operations for ParkingLot\n"
        },
        {
            "name": "parking-slot",
            "description": "ParkingSlotController operations for ParkingSlot\n"
        },
        {
            "name": "reservation",
            "description": "ReservationController operations for Reservation\n"
        },
        {
            "name": "vehicle",
            "description": "VehicleController operations for Vehicle\n"
        }
    ]
}